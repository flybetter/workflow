
/*
 * $Id$
 */

package com.calix.bseries.server.dbmodel;

  //---------------------------------/
 //- Imported classes and packages -/
//---------------------------------/

//BEGIN IMPORTS
import java.util.ArrayList;
import java.util.Collection;

import java.util.Iterator;

import com.calix.ems.database.C7Database;
import com.calix.ems.database.DbTransaction;
import com.calix.ems.exception.EMSDatabaseException;
import com.calix.ems.exception.EMSException;
import com.calix.ems.query.EMSGetAllQuery;
import com.calix.ems.query.ICMSQuery;
import com.calix.system.common.log.Log;
//END IMPORTS

import java.util.Collection;
import java.util.Iterator;


import com.calix.ems.query.ICMSQuery;
import com.calix.ems.util.TLVHelper;
import com.calix.system.common.log.Log;
import com.calix.system.common.protocol.tlv.TLV;
import com.calix.system.server.dbmodel.*;


/**
 * Class B6AccessProfile.
 * 
 * @version $Revision$ $Date$
 */
public class B6AccessProfile extends com.calix.system.server.dbmodel.CMSObject {


      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * Field m_ArpCacheTimeOut
     */
    public Integer m_ArpCacheTimeOut;

    /**
     * Field m_ArpMode
     */
    public Integer m_ArpMode;

    /**
     * Field m_ArpReplyGW
     */
    public Integer m_ArpReplyGW;

    /**
     * Field m_AssociatedService
     */
    public Integer m_AssociatedService;

    /**
     * Field m_BLACKListRate
     */
    public String m_BLACKListRate;

    /**
     * Field m_CircuitID
     */
    public String m_CircuitID;

    /**
     * Field m_Description
     */
    public String m_Description;

    /**
     * Field m_DhcpMode
     */
    public Integer m_DhcpMode;

    /**
     * Field m_DhcpOption82
     */
    public Integer m_DhcpOption82;

    /**
     * Field m_DhcpServers
     */
    public String m_DhcpServers;

    /**
     * Field m_Dotprority
     */
    public Integer m_Dotprority;

    /**
     * Field m_HotSwap
     */
    public Integer m_HotSwap;

    /**
     * Field m_INPUTPolicyUnicastRateLimit
     */
    public String m_INPUTPolicyUnicastRateLimit;

    /**
     * Field m_IgmpHost
     */
    public String m_IgmpHost;

    /**
     * Field m_IgmpMode
     */
    public Integer m_IgmpMode;

    /**
     * Field m_IgmpVLAN
     */
    public Integer m_IgmpVLAN;

    /**
     * Field m_IgmpgroupLimit
     */
    public Integer m_IgmpgroupLimit;

    /**
     * Field m_InputServicePolicyName
     */
    public String m_InputServicePolicyName;

    /**
     * Field m_Ipv6LDRA
     */
    public Integer m_Ipv6LDRA;

    /**
     * Field m_Ipv6NDP
     */
    public Integer m_Ipv6NDP;

    /**
     * Field m_Ipv6TrustPort
     */
    public Integer m_Ipv6TrustPort;

    /**
     * Field m_IsAutogenerated
     */
    public Integer m_IsAutogenerated;

    /**
     * Field m_MacLearning
     */
    public Integer m_MacLearning;

    /**
     * Field m_MacLimit
     */
    public Integer m_MacLimit;

    /**
     * Field m_MaxPriority
     */
    public Integer m_MaxPriority;

    /**
     * Field m_OUTPUTPolicyUnicastRateLimit
     */
    public String m_OUTPUTPolicyUnicastRateLimit;

    /**
     * Field m_OutputServicePolicyName
     */
    public String m_OutputServicePolicyName;

    /**
     * Field m_PppoeCircuitId
     */
    public String m_PppoeCircuitId;

    /**
     * Field m_PppoeMaxPayloadMode
     */
    public Integer m_PppoeMaxPayloadMode;

    /**
     * Field m_PppoeMaxPayloadSize
     */
    public Integer m_PppoeMaxPayloadSize;

    /**
     * Field m_PppoeMode
     */
    public Integer m_PppoeMode;

    /**
     * Field m_PppoeRemoteId
     */
    public String m_PppoeRemoteId;

    /**
     * Field m_PppoeRetransmitInterval
     */
    public Integer m_PppoeRetransmitInterval;

    /**
     * Field m_PppoeRetransmitRetryCount
     */
    public Integer m_PppoeRetransmitRetryCount;

    /**
     * Field m_PppoeStaleDetectInterval
     */
    public Integer m_PppoeStaleDetectInterval;

    /**
     * Field m_PppoeStaleDetectRetryCount
     */
    public Integer m_PppoeStaleDetectRetryCount;

    /**
     * Field m_PppoeStaleDetectState
     */
    public Integer m_PppoeStaleDetectState;

    /**
     * Field m_ServiceDefName
     */
    public String m_ServiceDefName;

    /**
     * Field m_ServicePackage_Access
     */
    public String m_ServicePackage_Access;

    /**
     * Field m_ServiceType
     */
    public Integer m_ServiceType;

    /**
     * Field m_Syncstatus
     */
    public String m_Syncstatus;

    /**
     * Field m_VlanID
     */
    public Integer m_VlanID;

    /**
     * Field m_id
     */
    public com.calix.system.server.dbmodel.ICMSAid m_id;

    /**
     * Field TYPE_NAME
     */
    public static String TYPE_NAME = "B6AccessProfile";

    /**
     * Field flowID
     */
    public static final int flowID = 1;


      //----------------/
     //- Constructors -/
    //----------------/

    public B6AccessProfile() {
        super();
    } //-- com.calix.bseries.server.dbmodel.B6AccessProfile()


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Method copyFields
     * 
     * @param obj1
     */
    protected void copyFields(CMSObject obj1)
    {
        if( obj1 instanceof B6AccessProfile ) {
            super.copyFields(obj1);
            B6AccessProfile obj = (B6AccessProfile)obj1;
            setArpCacheTimeOut((Integer)Helper.copy(obj.getArpCacheTimeOut()));
            setArpMode((Integer)Helper.copy(obj.getArpMode()));
            setArpReplyGW((Integer)Helper.copy(obj.getArpReplyGW()));
            setAssociatedService((Integer)Helper.copy(obj.getAssociatedService()));
            setBLACKListRate((String)Helper.copy(obj.getBLACKListRate()));
            setCircuitID((String)Helper.copy(obj.getCircuitID()));
            setDescription((String)Helper.copy(obj.getDescription()));
            setDhcpMode((Integer)Helper.copy(obj.getDhcpMode()));
            setDhcpOption82((Integer)Helper.copy(obj.getDhcpOption82()));
            setDhcpServers((String)Helper.copy(obj.getDhcpServers()));
            setDotprority((Integer)Helper.copy(obj.getDotprority()));
            setHotSwap((Integer)Helper.copy(obj.getHotSwap()));
            setINPUTPolicyUnicastRateLimit((String)Helper.copy(obj.getINPUTPolicyUnicastRateLimit()));
            setIgmpHost((String)Helper.copy(obj.getIgmpHost()));
            setIgmpMode((Integer)Helper.copy(obj.getIgmpMode()));
            setIgmpVLAN((Integer)Helper.copy(obj.getIgmpVLAN()));
            setIgmpgroupLimit((Integer)Helper.copy(obj.getIgmpgroupLimit()));
            setInputServicePolicyName((String)Helper.copy(obj.getInputServicePolicyName()));
			setIpv6LDRA((Integer)Helper.copy(obj.getIpv6LDRA()));
            setIpv6NDP((Integer)Helper.copy(obj.getIpv6NDP()));
            setIpv6TrustPort((Integer)Helper.copy(obj.getIpv6TrustPort()));
            setIsAutogenerated((Integer)Helper.copy(obj.getIsAutogenerated()));
            setMacLearning((Integer)Helper.copy(obj.getMacLearning()));
            setMacLimit((Integer)Helper.copy(obj.getMacLimit()));
            setMaxPriority((Integer)Helper.copy(obj.getMaxPriority()));
            setOUTPUTPolicyUnicastRateLimit((String)Helper.copy(obj.getOUTPUTPolicyUnicastRateLimit()));
            setOutputServicePolicyName((String)Helper.copy(obj.getOutputServicePolicyName()));
            setPppoeCircuitId((String)Helper.copy(obj.getPppoeCircuitId()));
            setPppoeMaxPayloadMode((Integer)Helper.copy(obj.getPppoeMaxPayloadMode()));
            setPppoeMaxPayloadSize((Integer)Helper.copy(obj.getPppoeMaxPayloadSize()));
            setPppoeMode((Integer)Helper.copy(obj.getPppoeMode()));
            setPppoeRemoteId((String)Helper.copy(obj.getPppoeRemoteId()));
            setPppoeRetransmitInterval((Integer)Helper.copy(obj.getPppoeRetransmitInterval()));
            setPppoeRetransmitRetryCount((Integer)Helper.copy(obj.getPppoeRetransmitRetryCount()));
            setPppoeStaleDetectInterval((Integer)Helper.copy(obj.getPppoeStaleDetectInterval()));
            setPppoeStaleDetectRetryCount((Integer)Helper.copy(obj.getPppoeStaleDetectRetryCount()));
            setPppoeStaleDetectState((Integer)Helper.copy(obj.getPppoeStaleDetectState()));
            setServiceDefName((String)Helper.copy(obj.getServiceDefName()));
            setServicePackage_Access((String)Helper.copy(obj.getServicePackage_Access()));
            setServiceType((Integer)Helper.copy(obj.getServiceType()));
            setSyncstatus((String)Helper.copy(obj.getSyncstatus()));
            setVlanID((Integer)Helper.copy(obj.getVlanID()));
            setid((com.calix.system.server.dbmodel.ICMSAid)Helper.copy(obj.getid()));
            setIdentityValue((com.calix.system.server.dbmodel.ICMSAid)Helper.copy(obj.getIdentityValue()));
        }
    } //-- void copyFields(CMSObject) 

    /**
     * Method getArpCacheTimeOut
     */
    public Integer getArpCacheTimeOut()
    {
        return this.m_ArpCacheTimeOut;
    } //-- Integer getArpCacheTimeOut() 

    /**
     * Method getArpMode
     */
    public Integer getArpMode()
    {
        return this.m_ArpMode;
    } //-- Integer getArpMode() 

    /**
     * Method getArpReplyGW
     */
    public Integer getArpReplyGW()
    {
        return this.m_ArpReplyGW;
    } //-- Integer getArpReplyGW() 

    /**
     * Method getAssociatedService
     */
    public Integer getAssociatedService()
    {
        return this.m_AssociatedService;
    } //-- Integer getAssociatedService() 

    /**
     * Method getBLACKListRate
     */
    public String getBLACKListRate()
    {
        return this.m_BLACKListRate;
    } //-- String getBLACKListRate() 

    /**
     * Method getCircuitID
     */
    public String getCircuitID()
    {
        return this.m_CircuitID;
    } //-- String getCircuitID() 

    /**
     * Method getDescription
     */
    public String getDescription()
    {
        return this.m_Description;
    } //-- String getDescription() 

    /**
     * Method getDhcpMode
     */
    public Integer getDhcpMode()
    {
        return this.m_DhcpMode;
    } //-- Integer getDhcpMode() 

    /**
     * Method getDhcpOption82
     */
    public Integer getDhcpOption82()
    {
        return this.m_DhcpOption82;
    } //-- Integer getDhcpOption82() 

    /**
     * Method getDhcpServers
     */
    public String getDhcpServers()
    {
        return this.m_DhcpServers;
    } //-- String getDhcpServers() 

    /**
     * Method getDotprority
     */
    public Integer getDotprority()
    {
        return this.m_Dotprority;
    } //-- Integer getDotprority() 

    /**
     * Method getHotSwap
     */
    public Integer getHotSwap()
    {
        return this.m_HotSwap;
    } //-- Integer getHotSwap() 

    /**
     * Method getINPUTPolicyUnicastRateLimit
     */
    public String getINPUTPolicyUnicastRateLimit()
    {
        return this.m_INPUTPolicyUnicastRateLimit;
    } //-- String getINPUTPolicyUnicastRateLimit() 

    /**
     * Method getIdentityValue
     */
    public com.calix.system.server.dbmodel.ICMSAid getIdentityValue()
    {
        return this.m_id;
    } //-- com.calix.system.server.dbmodel.ICMSAid getIdentityValue() 

    /**
     * Method getIgmpHost
     */
    public String getIgmpHost()
    {
        return this.m_IgmpHost;
    } //-- String getIgmpHost() 

    /**
     * Method getIgmpMode
     */
    public Integer getIgmpMode()
    {
        return this.m_IgmpMode;
    } //-- Integer getIgmpMode() 

    /**
     * Method getIgmpVLAN
     */
    public Integer getIgmpVLAN()
    {
        return this.m_IgmpVLAN;
    } //-- Integer getIgmpVLAN() 

    /**
     * Method getIgmpgroupLimit
     */
    public Integer getIgmpgroupLimit()
    {
        return this.m_IgmpgroupLimit;
    } //-- Integer getIgmpgroupLimit() 

    /**
     * Method getInputServicePolicyName
     */
    public String getInputServicePolicyName()
    {
        return this.m_InputServicePolicyName;
    } //-- String getInputServicePolicyName() 

    /**
     * Method getIpv6LDRA
     */
    public Integer getIpv6LDRA()
    {
        return this.m_Ipv6LDRA;
    } //-- Integer getIpv6LDRA() 

    /**
     * Method getIpv6NDP
     */
    public Integer getIpv6NDP()
    {
        return this.m_Ipv6NDP;
    } //-- Integer getIpv6NDP() 

    /**
     * Method getIpv6TrustPort
     */
    public Integer getIpv6TrustPort()
    {
        return this.m_Ipv6TrustPort;
    } //-- Integer getIpv6TrustPort() 

    /**
     * Method getIsAutogenerated
     */
    public Integer getIsAutogenerated()
    {
        return this.m_IsAutogenerated;
    } //-- Integer getIsAutogenerated() 

    /**
     * Method getMacLearning
     */
    public Integer getMacLearning()
    {
        return this.m_MacLearning;
    } //-- Integer getMacLearning() 

    /**
     * Method getMacLimit
     */
    public Integer getMacLimit()
    {
        return this.m_MacLimit;
    } //-- Integer getMacLimit() 

    /**
     * Method getMaxPriority
     */
    public Integer getMaxPriority()
    {
        return this.m_MaxPriority;
    } //-- Integer getMaxPriority() 

    /**
     * Method getOUTPUTPolicyUnicastRateLimit
     */
    public String getOUTPUTPolicyUnicastRateLimit()
    {
        return this.m_OUTPUTPolicyUnicastRateLimit;
    } //-- String getOUTPUTPolicyUnicastRateLimit() 

    /**
     * Method getOutputServicePolicyName
     */
    public String getOutputServicePolicyName()
    {
        return this.m_OutputServicePolicyName;
    } //-- String getOutputServicePolicyName() 

    /**
     * Method getPppoeCircuitId
     */
    public String getPppoeCircuitId()
    {
        return this.m_PppoeCircuitId;
    } //-- String getPppoeCircuitId() 

    /**
     * Method getPppoeMaxPayloadMode
     */
    public Integer getPppoeMaxPayloadMode()
    {
        return this.m_PppoeMaxPayloadMode;
    } //-- Integer getPppoeMaxPayloadMode() 

    /**
     * Method getPppoeMaxPayloadSize
     */
    public Integer getPppoeMaxPayloadSize()
    {
        return this.m_PppoeMaxPayloadSize;
    } //-- Integer getPppoeMaxPayloadSize() 

    /**
     * Method getPppoeMode
     */
    public Integer getPppoeMode()
    {
        return this.m_PppoeMode;
    } //-- Integer getPppoeMode() 

    /**
     * Method getPppoeRemoteId
     */
    public String getPppoeRemoteId()
    {
        return this.m_PppoeRemoteId;
    } //-- String getPppoeRemoteId() 

    /**
     * Method getPppoeRetransmitInterval
     */
    public Integer getPppoeRetransmitInterval()
    {
        return this.m_PppoeRetransmitInterval;
    } //-- Integer getPppoeRetransmitInterval() 

    /**
     * Method getPppoeRetransmitRetryCount
     */
    public Integer getPppoeRetransmitRetryCount()
    {
        return this.m_PppoeRetransmitRetryCount;
    } //-- Integer getPppoeRetransmitRetryCount() 

    /**
     * Method getPppoeStaleDetectInterval
     */
    public Integer getPppoeStaleDetectInterval()
    {
        return this.m_PppoeStaleDetectInterval;
    } //-- Integer getPppoeStaleDetectInterval() 

    /**
     * Method getPppoeStaleDetectRetryCount
     */
    public Integer getPppoeStaleDetectRetryCount()
    {
        return this.m_PppoeStaleDetectRetryCount;
    } //-- Integer getPppoeStaleDetectRetryCount() 

    /**
     * Method getPppoeStaleDetectState
     */
    public Integer getPppoeStaleDetectState()
    {
        return this.m_PppoeStaleDetectState;
    } //-- Integer getPppoeStaleDetectState() 

    /**
     * Method getServiceDefName
     */
    public String getServiceDefName()
    {
        return this.m_ServiceDefName;
    } //-- String getServiceDefName() 

    /**
     * Method getServicePackage_Access
     */
    public String getServicePackage_Access()
    {
        return this.m_ServicePackage_Access;
    } //-- String getServicePackage_Access() 

    /**
     * Method getServiceType
     */
    public Integer getServiceType()
    {
        return this.m_ServiceType;
    } //-- Integer getServiceType() 

    /**
     * Method getSyncstatus
     */
    public String getSyncstatus()
    {
        return this.m_Syncstatus;
    } //-- String getSyncstatus() 

    /**
     * Method getTlvType
     */
    public int getTlvType()
    {
        return BseriesTlvConstants.B6AccessProfile;
    } //-- int getTlvType() 

    /**
     * Method getTypeName
     */
    public String getTypeName()
    {
        return TYPE_NAME;
    } //-- String getTypeName() 

    /**
     * Method getVlanID
     */
    public Integer getVlanID()
    {
        return this.m_VlanID;
    } //-- Integer getVlanID() 

    /**
     * Method getid
     */
    public com.calix.system.server.dbmodel.ICMSAid getid()
    {
        return this.m_id;
    } //-- com.calix.system.server.dbmodel.ICMSAid getid() 

    /**
     * Method populateAttributeFromTLV
     * 
     * @param tlv
     * @param from_version
     */
    public void populateAttributeFromTLV(TLV tlv, SwVersionNo from_version)
    {
        if (tlv == null)
            return;
        switch (tlv.getType()) {
            case 0x3414:
                if (m_ArpReplyGW == null) {
                    m_ArpReplyGW = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x3415:
                if (m_ArpCacheTimeOut == null) {
                    m_ArpCacheTimeOut = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x3416:
                if (m_DhcpMode == null) {
                    m_DhcpMode = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x3417:
                if (m_DhcpOption82 == null) {
                    m_DhcpOption82 = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x3418:
                if (m_IgmpHost == null) {
                    m_IgmpHost = TLVHelper.getStringValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x3419:
                if (m_IgmpgroupLimit == null) {
                    m_IgmpgroupLimit = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x341A:
                if (m_CircuitID == null) {
                    m_CircuitID = TLVHelper.getStringValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x341B:
                if (m_PppoeCircuitId == null) {
                    m_PppoeCircuitId = TLVHelper.getStringValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x341C:
                if (m_PppoeRemoteId == null) {
                    m_PppoeRemoteId = TLVHelper.getStringValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x341D:
                if (m_MacLimit == null) {
                    m_MacLimit = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x341E:
                if (m_MacLearning == null) {
                    m_MacLearning = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x341F:
                if (m_DhcpServers == null) {
                    m_DhcpServers = TLVHelper.getStringValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x3420:
                if (m_HotSwap == null) {
                    m_HotSwap = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x3421:
                if (m_IgmpVLAN == null) {
                    m_IgmpVLAN = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x3422:
                if (m_BLACKListRate == null) {
                    m_BLACKListRate = TLVHelper.getStringValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x3423:
                if (m_VlanID == null) {
                    m_VlanID = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x3424:
                if (m_InputServicePolicyName == null) {
                    m_InputServicePolicyName = TLVHelper.getStringValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x3425:
                if (m_INPUTPolicyUnicastRateLimit == null) {
                    m_INPUTPolicyUnicastRateLimit = TLVHelper.getStringValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x3426:
                if (m_OutputServicePolicyName == null) {
                    m_OutputServicePolicyName = TLVHelper.getStringValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x3427:
                if (m_OUTPUTPolicyUnicastRateLimit == null) {
                    m_OUTPUTPolicyUnicastRateLimit = TLVHelper.getStringValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x3428:
                if (m_IgmpMode == null) {
                    m_IgmpMode = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x3429:
                if (m_PppoeMode == null) {
                    m_PppoeMode = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x342A:
                if (m_PppoeStaleDetectState == null) {
                    m_PppoeStaleDetectState = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x342B:
                if (m_PppoeStaleDetectInterval == null) {
                    m_PppoeStaleDetectInterval = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x342C:
                if (m_PppoeStaleDetectRetryCount == null) {
                    m_PppoeStaleDetectRetryCount = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x342D:
                if (m_PppoeRetransmitInterval == null) {
                    m_PppoeRetransmitInterval = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x342E:
                if (m_PppoeRetransmitRetryCount == null) {
                    m_PppoeRetransmitRetryCount = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x342F:
                if (m_PppoeMaxPayloadMode == null) {
                    m_PppoeMaxPayloadMode = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x3430:
                if (m_PppoeMaxPayloadSize == null) {
                    m_PppoeMaxPayloadSize = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x3431:
                if (m_Syncstatus == null) {
                    m_Syncstatus = TLVHelper.getStringValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x3432:
                if (m_ServiceDefName == null) {
                    m_ServiceDefName = TLVHelper.getStringValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x3433:
                if (m_Dotprority == null) {
                    m_Dotprority = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x3434:
                if (m_MaxPriority == null) {
                    m_MaxPriority = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x3435:
                if (m_AssociatedService == null) {
                    m_AssociatedService = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x3436:
                if (m_Ipv6LDRA == null) {
                    m_Ipv6LDRA = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x3437:
                if (m_Ipv6NDP == null) {
                    m_Ipv6NDP = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x3438:
                if (m_Ipv6TrustPort == null) {
                    m_Ipv6TrustPort = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x34CB:
                if (m_ServicePackage_Access == null) {
                    m_ServicePackage_Access = TLVHelper.getStringValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x34CC:
                if (m_IsAutogenerated == null) {
                    m_IsAutogenerated = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x34CD:
                if (m_Description == null) {
                    m_Description = TLVHelper.getStringValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x34CE:
                if (m_ServiceType == null) {
                    m_ServiceType = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
            case 0x34CF:
                if (m_ArpMode == null) {
                    m_ArpMode = TLVHelper.getIntegerValueOfTLV(tlv );
                    return;
                }
                break;
        }
        super.populateAttributeFromTLV(tlv, from_version);
    } //-- void populateAttributeFromTLV(TLV, SwVersionNo) 

    /**
     * Method populateTLVFromAttributes
     * 
     * @param tlv
     * @param to_version
     */
    public void populateTLVFromAttributes(TLV tlv, SwVersionNo to_version)
    {
        if (tlv == null)
            return;
        super.populateTLVFromAttributes(tlv, to_version);
        TLVHelper.addEmbeddedTLV(tlv, 0x3415, m_ArpCacheTimeOut);
        TLVHelper.addEmbeddedTLV(tlv, 0x34CF, m_ArpMode);
        TLVHelper.addEmbeddedTLV(tlv, 0x3414, m_ArpReplyGW);
        TLVHelper.addEmbeddedTLV(tlv, 0x3435, m_AssociatedService);
        TLVHelper.addEmbeddedTLV(tlv, 0x3422, m_BLACKListRate);
        TLVHelper.addEmbeddedTLV(tlv, 0x341A, m_CircuitID);
        TLVHelper.addEmbeddedTLV(tlv, 0x34CD, m_Description);
        TLVHelper.addEmbeddedTLV(tlv, 0x3416, m_DhcpMode);
        TLVHelper.addEmbeddedTLV(tlv, 0x3417, m_DhcpOption82);
        TLVHelper.addEmbeddedTLV(tlv, 0x341F, m_DhcpServers);
        TLVHelper.addEmbeddedTLV(tlv, 0x3433, m_Dotprority);
        TLVHelper.addEmbeddedTLV(tlv, 0x3420, m_HotSwap);
        TLVHelper.addEmbeddedTLV(tlv, 0x3425, m_INPUTPolicyUnicastRateLimit);
        TLVHelper.addEmbeddedTLV(tlv, 0x3418, m_IgmpHost);
        TLVHelper.addEmbeddedTLV(tlv, 0x3428, m_IgmpMode);
        TLVHelper.addEmbeddedTLV(tlv, 0x3421, m_IgmpVLAN);
        TLVHelper.addEmbeddedTLV(tlv, 0x3419, m_IgmpgroupLimit);
        TLVHelper.addEmbeddedTLV(tlv, 0x3424, m_InputServicePolicyName);
        TLVHelper.addEmbeddedTLV(tlv, 0x3436, m_Ipv6LDRA);
        TLVHelper.addEmbeddedTLV(tlv, 0x3437, m_Ipv6NDP);
        TLVHelper.addEmbeddedTLV(tlv, 0x3438, m_Ipv6TrustPort);
        TLVHelper.addEmbeddedTLV(tlv, 0x34CC, m_IsAutogenerated);
        TLVHelper.addEmbeddedTLV(tlv, 0x341E, m_MacLearning);
        TLVHelper.addEmbeddedTLV(tlv, 0x341D, m_MacLimit);
        TLVHelper.addEmbeddedTLV(tlv, 0x3434, m_MaxPriority);
        TLVHelper.addEmbeddedTLV(tlv, 0x3427, m_OUTPUTPolicyUnicastRateLimit);
        TLVHelper.addEmbeddedTLV(tlv, 0x3426, m_OutputServicePolicyName);
        TLVHelper.addEmbeddedTLV(tlv, 0x341B, m_PppoeCircuitId);
        TLVHelper.addEmbeddedTLV(tlv, 0x342F, m_PppoeMaxPayloadMode);
        TLVHelper.addEmbeddedTLV(tlv, 0x3430, m_PppoeMaxPayloadSize);
        TLVHelper.addEmbeddedTLV(tlv, 0x3429, m_PppoeMode);
        TLVHelper.addEmbeddedTLV(tlv, 0x341C, m_PppoeRemoteId);
        TLVHelper.addEmbeddedTLV(tlv, 0x342D, m_PppoeRetransmitInterval);
        TLVHelper.addEmbeddedTLV(tlv, 0x342E, m_PppoeRetransmitRetryCount);
        TLVHelper.addEmbeddedTLV(tlv, 0x342B, m_PppoeStaleDetectInterval);
        TLVHelper.addEmbeddedTLV(tlv, 0x342C, m_PppoeStaleDetectRetryCount);
        TLVHelper.addEmbeddedTLV(tlv, 0x342A, m_PppoeStaleDetectState);
        TLVHelper.addEmbeddedTLV(tlv, 0x3432, m_ServiceDefName);
        TLVHelper.addEmbeddedTLV(tlv, 0x34CB, m_ServicePackage_Access);
        TLVHelper.addEmbeddedTLV(tlv, 0x34CE, m_ServiceType);
        TLVHelper.addEmbeddedTLV(tlv, 0x3431, m_Syncstatus);
        TLVHelper.addEmbeddedTLV(tlv, 0x3423, m_VlanID);
    } //-- void populateTLVFromAttributes(TLV, SwVersionNo) 

    /**
     * Method setArpCacheTimeOut
     * 
     * @param ArpCacheTimeOut
     */
    public void setArpCacheTimeOut(Integer ArpCacheTimeOut)
    {
        this.m_ArpCacheTimeOut = ArpCacheTimeOut;
    } //-- void setArpCacheTimeOut(Integer) 

    /**
     * Method setArpMode
     * 
     * @param ArpMode
     */
    public void setArpMode(Integer ArpMode)
    {
        this.m_ArpMode = ArpMode;
    } //-- void setArpMode(Integer) 

    /**
     * Method setArpReplyGW
     * 
     * @param ArpReplyGW
     */
    public void setArpReplyGW(Integer ArpReplyGW)
    {
        this.m_ArpReplyGW = ArpReplyGW;
    } //-- void setArpReplyGW(Integer) 

    /**
     * Method setAssociatedService
     * 
     * @param AssociatedService
     */
    public void setAssociatedService(Integer AssociatedService)
    {
        this.m_AssociatedService = AssociatedService;
    } //-- void setAssociatedService(Integer) 

    /**
     * Method setBLACKListRate
     * 
     * @param BLACKListRate
     */
    public void setBLACKListRate(String BLACKListRate)
    {
        this.m_BLACKListRate = BLACKListRate;
    } //-- void setBLACKListRate(String) 

    /**
     * Method setCircuitID
     * 
     * @param CircuitID
     */
    public void setCircuitID(String CircuitID)
    {
        this.m_CircuitID = CircuitID;
    } //-- void setCircuitID(String) 

    /**
     * Method setDescription
     * 
     * @param Description
     */
    public void setDescription(String Description)
    {
        this.m_Description = Description;
    } //-- void setDescription(String) 

    /**
     * Method setDhcpMode
     * 
     * @param DhcpMode
     */
    public void setDhcpMode(Integer DhcpMode)
    {
        this.m_DhcpMode = DhcpMode;
    } //-- void setDhcpMode(Integer) 

    /**
     * Method setDhcpOption82
     * 
     * @param DhcpOption82
     */
    public void setDhcpOption82(Integer DhcpOption82)
    {
        this.m_DhcpOption82 = DhcpOption82;
    } //-- void setDhcpOption82(Integer) 

    /**
     * Method setDhcpServers
     * 
     * @param DhcpServers
     */
    public void setDhcpServers(String DhcpServers)
    {
        this.m_DhcpServers = DhcpServers;
    } //-- void setDhcpServers(String) 

    /**
     * Method setDotprority
     * 
     * @param Dotprority
     */
    public void setDotprority(Integer Dotprority)
    {
        this.m_Dotprority = Dotprority;
    } //-- void setDotprority(Integer) 

    /**
     * Method setHotSwap
     * 
     * @param HotSwap
     */
    public void setHotSwap(Integer HotSwap)
    {
        this.m_HotSwap = HotSwap;
    } //-- void setHotSwap(Integer) 

    /**
     * Method setINPUTPolicyUnicastRateLimit
     * 
     * @param INPUTPolicyUnicastRateLimit
     */
    public void setINPUTPolicyUnicastRateLimit(String INPUTPolicyUnicastRateLimit)
    {
        this.m_INPUTPolicyUnicastRateLimit = INPUTPolicyUnicastRateLimit;
    } //-- void setINPUTPolicyUnicastRateLimit(String) 

    /**
     * Method setIdentityValue
     * 
     * @param id
     */
    public boolean setIdentityValue(com.calix.system.server.dbmodel.ICMSAid id)
    {
        this.m_id = (com.calix.system.server.dbmodel.ICMSAid)id;
        return true;
    } //-- boolean setIdentityValue(com.calix.system.server.dbmodel.ICMSAid) 

    /**
     * Method setIgmpHost
     * 
     * @param IgmpHost
     */
    public void setIgmpHost(String IgmpHost)
    {
        this.m_IgmpHost = IgmpHost;
    } //-- void setIgmpHost(String) 

    /**
     * Method setIgmpMode
     * 
     * @param IgmpMode
     */
    public void setIgmpMode(Integer IgmpMode)
    {
        this.m_IgmpMode = IgmpMode;
    } //-- void setIgmpMode(Integer) 

    /**
     * Method setIgmpVLAN
     * 
     * @param IgmpVLAN
     */
    public void setIgmpVLAN(Integer IgmpVLAN)
    {
        this.m_IgmpVLAN = IgmpVLAN;
    } //-- void setIgmpVLAN(Integer) 

    /**
     * Method setIgmpgroupLimit
     * 
     * @param IgmpgroupLimit
     */
    public void setIgmpgroupLimit(Integer IgmpgroupLimit)
    {
        this.m_IgmpgroupLimit = IgmpgroupLimit;
    } //-- void setIgmpgroupLimit(Integer) 

    /**
     * Method setInputServicePolicyName
     * 
     * @param InputServicePolicyName
     */
    public void setInputServicePolicyName(String InputServicePolicyName)
    {
        this.m_InputServicePolicyName = InputServicePolicyName;
    } //-- void setInputServicePolicyName(String) 

    /**
     * Method setIpv6LDRA
     * 
     * @param Ipv6LDRA
     */
    public void setIpv6LDRA(Integer Ipv6LDRA)
    {
        this.m_Ipv6LDRA = Ipv6LDRA;
    } //-- void setIpv6LDRA(Integer) 

    /**
     * Method setIpv6NDP
     * 
     * @param Ipv6NDP
     */
    public void setIpv6NDP(Integer Ipv6NDP)
    {
        this.m_Ipv6NDP = Ipv6NDP;
    } //-- void setIpv6NDP(Integer) 

    /**
     * Method setIpv6TrustPort
     * 
     * @param Ipv6TrustPort
     */
    public void setIpv6TrustPort(Integer Ipv6TrustPort)
    {
        this.m_Ipv6TrustPort = Ipv6TrustPort;
    } //-- void setIpv6TrustPort(Integer) 

    /**
     * Method setIsAutogenerated
     * 
     * @param IsAutogenerated
     */
    public void setIsAutogenerated(Integer IsAutogenerated)
    {
        this.m_IsAutogenerated = IsAutogenerated;
    } //-- void setIsAutogenerated(Integer) 

    /**
     * Method setMacLearning
     * 
     * @param MacLearning
     */
    public void setMacLearning(Integer MacLearning)
    {
        this.m_MacLearning = MacLearning;
    } //-- void setMacLearning(Integer) 

    /**
     * Method setMacLimit
     * 
     * @param MacLimit
     */
    public void setMacLimit(Integer MacLimit)
    {
        this.m_MacLimit = MacLimit;
    } //-- void setMacLimit(Integer) 

    /**
     * Method setMaxPriority
     * 
     * @param MaxPriority
     */
    public void setMaxPriority(Integer MaxPriority)
    {
        this.m_MaxPriority = MaxPriority;
    } //-- void setMaxPriority(Integer) 

    /**
     * Method setOUTPUTPolicyUnicastRateLimit
     * 
     * @param OUTPUTPolicyUnicastRateLimit
     */
    public void setOUTPUTPolicyUnicastRateLimit(String OUTPUTPolicyUnicastRateLimit)
    {
        this.m_OUTPUTPolicyUnicastRateLimit = OUTPUTPolicyUnicastRateLimit;
    } //-- void setOUTPUTPolicyUnicastRateLimit(String) 

    /**
     * Method setOutputServicePolicyName
     * 
     * @param OutputServicePolicyName
     */
    public void setOutputServicePolicyName(String OutputServicePolicyName)
    {
        this.m_OutputServicePolicyName = OutputServicePolicyName;
    } //-- void setOutputServicePolicyName(String) 

    /**
     * Method setPppoeCircuitId
     * 
     * @param PppoeCircuitId
     */
    public void setPppoeCircuitId(String PppoeCircuitId)
    {
        this.m_PppoeCircuitId = PppoeCircuitId;
    } //-- void setPppoeCircuitId(String) 

    /**
     * Method setPppoeMaxPayloadMode
     * 
     * @param PppoeMaxPayloadMode
     */
    public void setPppoeMaxPayloadMode(Integer PppoeMaxPayloadMode)
    {
        this.m_PppoeMaxPayloadMode = PppoeMaxPayloadMode;
    } //-- void setPppoeMaxPayloadMode(Integer) 

    /**
     * Method setPppoeMaxPayloadSize
     * 
     * @param PppoeMaxPayloadSize
     */
    public void setPppoeMaxPayloadSize(Integer PppoeMaxPayloadSize)
    {
        this.m_PppoeMaxPayloadSize = PppoeMaxPayloadSize;
    } //-- void setPppoeMaxPayloadSize(Integer) 

    /**
     * Method setPppoeMode
     * 
     * @param PppoeMode
     */
    public void setPppoeMode(Integer PppoeMode)
    {
        this.m_PppoeMode = PppoeMode;
    } //-- void setPppoeMode(Integer) 

    /**
     * Method setPppoeRemoteId
     * 
     * @param PppoeRemoteId
     */
    public void setPppoeRemoteId(String PppoeRemoteId)
    {
        this.m_PppoeRemoteId = PppoeRemoteId;
    } //-- void setPppoeRemoteId(String) 

    /**
     * Method setPppoeRetransmitInterval
     * 
     * @param PppoeRetransmitInterval
     */
    public void setPppoeRetransmitInterval(Integer PppoeRetransmitInterval)
    {
        this.m_PppoeRetransmitInterval = PppoeRetransmitInterval;
    } //-- void setPppoeRetransmitInterval(Integer) 

    /**
     * Method setPppoeRetransmitRetryCount
     * 
     * @param PppoeRetransmitRetryCount
     */
    public void setPppoeRetransmitRetryCount(Integer PppoeRetransmitRetryCount)
    {
        this.m_PppoeRetransmitRetryCount = PppoeRetransmitRetryCount;
    } //-- void setPppoeRetransmitRetryCount(Integer) 

    /**
     * Method setPppoeStaleDetectInterval
     * 
     * @param PppoeStaleDetectInterval
     */
    public void setPppoeStaleDetectInterval(Integer PppoeStaleDetectInterval)
    {
        this.m_PppoeStaleDetectInterval = PppoeStaleDetectInterval;
    } //-- void setPppoeStaleDetectInterval(Integer) 

    /**
     * Method setPppoeStaleDetectRetryCount
     * 
     * @param PppoeStaleDetectRetryCount
     */
    public void setPppoeStaleDetectRetryCount(Integer PppoeStaleDetectRetryCount)
    {
        this.m_PppoeStaleDetectRetryCount = PppoeStaleDetectRetryCount;
    } //-- void setPppoeStaleDetectRetryCount(Integer) 

    /**
     * Method setPppoeStaleDetectState
     * 
     * @param PppoeStaleDetectState
     */
    public void setPppoeStaleDetectState(Integer PppoeStaleDetectState)
    {
        this.m_PppoeStaleDetectState = PppoeStaleDetectState;
    } //-- void setPppoeStaleDetectState(Integer) 

    /**
     * Method setServiceDefName
     * 
     * @param ServiceDefName
     */
    public void setServiceDefName(String ServiceDefName)
    {
        this.m_ServiceDefName = ServiceDefName;
    } //-- void setServiceDefName(String) 

    /**
     * Method setServicePackage_Access
     * 
     * @param ServicePackage_Access
     */
    public void setServicePackage_Access(String ServicePackage_Access)
    {
        this.m_ServicePackage_Access = ServicePackage_Access;
    } //-- void setServicePackage_Access(String) 

    /**
     * Method setServiceType
     * 
     * @param ServiceType
     */
    public void setServiceType(Integer ServiceType)
    {
        this.m_ServiceType = ServiceType;
    } //-- void setServiceType(Integer) 

    /**
     * Method setSyncstatus
     * 
     * @param Syncstatus
     */
    public void setSyncstatus(String Syncstatus)
    {
        this.m_Syncstatus = Syncstatus;
    } //-- void setSyncstatus(String) 

    /**
     * Method setTypeName
     * 
     * @param typeName
     */
    public boolean setTypeName(String typeName)
    {
        return false;
    } //-- boolean setTypeName(String) 

    /**
     * Method setVlanID
     * 
     * @param VlanID
     */
    public void setVlanID(Integer VlanID)
    {
        this.m_VlanID = VlanID;
    } //-- void setVlanID(Integer) 

    /**
     * Method setid
     * 
     * @param id
     */
    public void setid(com.calix.system.server.dbmodel.ICMSAid id)
    {
        this.m_id = id;
    } //-- void setid(com.calix.system.server.dbmodel.ICMSAid) 

    /**
     * Method updateFields
     * 
     * @param obj1
     */
    protected void updateFields(CMSObject obj1)
    {
        if( obj1 instanceof B6AccessProfile ) {
            super.updateFields(obj1);
            B6AccessProfile obj = (B6AccessProfile)obj1;
           if (obj.getArpCacheTimeOut() != null )
               setArpCacheTimeOut((Integer)Helper.copy(obj.getArpCacheTimeOut()));
           if (obj.getArpMode() != null )
               setArpMode((Integer)Helper.copy(obj.getArpMode()));
           if (obj.getArpReplyGW() != null )
               setArpReplyGW((Integer)Helper.copy(obj.getArpReplyGW()));
           if (obj.getAssociatedService() != null )
               setAssociatedService((Integer)Helper.copy(obj.getAssociatedService()));
           if (obj.getBLACKListRate() != null )
               setBLACKListRate((String)Helper.copy(obj.getBLACKListRate()));
           if (obj.getCircuitID() != null )
               setCircuitID((String)Helper.copy(obj.getCircuitID()));
           if (obj.getDescription() != null )
               setDescription((String)Helper.copy(obj.getDescription()));
           if (obj.getDhcpMode() != null )
               setDhcpMode((Integer)Helper.copy(obj.getDhcpMode()));
           if (obj.getDhcpOption82() != null )
               setDhcpOption82((Integer)Helper.copy(obj.getDhcpOption82()));
           if (obj.getDhcpServers() != null )
               setDhcpServers((String)Helper.copy(obj.getDhcpServers()));
           if (obj.getDotprority() != null )
               setDotprority((Integer)Helper.copy(obj.getDotprority()));
           if (obj.getHotSwap() != null )
               setHotSwap((Integer)Helper.copy(obj.getHotSwap()));
           if (obj.getINPUTPolicyUnicastRateLimit() != null )
               setINPUTPolicyUnicastRateLimit((String)Helper.copy(obj.getINPUTPolicyUnicastRateLimit()));
           if (obj.getIgmpHost() != null )
               setIgmpHost((String)Helper.copy(obj.getIgmpHost()));
           if (obj.getIgmpMode() != null )
               setIgmpMode((Integer)Helper.copy(obj.getIgmpMode()));
           if (obj.getIgmpVLAN() != null )
               setIgmpVLAN((Integer)Helper.copy(obj.getIgmpVLAN()));
           if (obj.getIgmpgroupLimit() != null )
               setIgmpgroupLimit((Integer)Helper.copy(obj.getIgmpgroupLimit()));
           if (obj.getInputServicePolicyName() != null )
               setInputServicePolicyName((String)Helper.copy(obj.getInputServicePolicyName()));
           if (obj.getIpv6LDRA() != null )
               setIpv6LDRA((Integer)Helper.copy(obj.getIpv6LDRA()));
           if (obj.getIpv6NDP() != null )
               setIpv6NDP((Integer)Helper.copy(obj.getIpv6NDP()));
           if (obj.getIpv6TrustPort() != null )
               setIpv6TrustPort((Integer)Helper.copy(obj.getIpv6TrustPort()));
           if (obj.getIsAutogenerated() != null )
               setIsAutogenerated((Integer)Helper.copy(obj.getIsAutogenerated()));
           if (obj.getMacLearning() != null )
               setMacLearning((Integer)Helper.copy(obj.getMacLearning()));
           if (obj.getMacLimit() != null )
               setMacLimit((Integer)Helper.copy(obj.getMacLimit()));
           if (obj.getMaxPriority() != null )
               setMaxPriority((Integer)Helper.copy(obj.getMaxPriority()));
           if (obj.getOUTPUTPolicyUnicastRateLimit() != null )
               setOUTPUTPolicyUnicastRateLimit((String)Helper.copy(obj.getOUTPUTPolicyUnicastRateLimit()));
           if (obj.getOutputServicePolicyName() != null )
               setOutputServicePolicyName((String)Helper.copy(obj.getOutputServicePolicyName()));
           if (obj.getPppoeCircuitId() != null )
               setPppoeCircuitId((String)Helper.copy(obj.getPppoeCircuitId()));
           if (obj.getPppoeMaxPayloadMode() != null )
               setPppoeMaxPayloadMode((Integer)Helper.copy(obj.getPppoeMaxPayloadMode()));
           if (obj.getPppoeMaxPayloadSize() != null )
               setPppoeMaxPayloadSize((Integer)Helper.copy(obj.getPppoeMaxPayloadSize()));
           if (obj.getPppoeMode() != null )
               setPppoeMode((Integer)Helper.copy(obj.getPppoeMode()));
           if (obj.getPppoeRemoteId() != null )
               setPppoeRemoteId((String)Helper.copy(obj.getPppoeRemoteId()));
           if (obj.getPppoeRetransmitInterval() != null )
               setPppoeRetransmitInterval((Integer)Helper.copy(obj.getPppoeRetransmitInterval()));
           if (obj.getPppoeRetransmitRetryCount() != null )
               setPppoeRetransmitRetryCount((Integer)Helper.copy(obj.getPppoeRetransmitRetryCount()));
           if (obj.getPppoeStaleDetectInterval() != null )
               setPppoeStaleDetectInterval((Integer)Helper.copy(obj.getPppoeStaleDetectInterval()));
           if (obj.getPppoeStaleDetectRetryCount() != null )
               setPppoeStaleDetectRetryCount((Integer)Helper.copy(obj.getPppoeStaleDetectRetryCount()));
           if (obj.getPppoeStaleDetectState() != null )
               setPppoeStaleDetectState((Integer)Helper.copy(obj.getPppoeStaleDetectState()));
           if (obj.getServiceDefName() != null )
               setServiceDefName((String)Helper.copy(obj.getServiceDefName()));
           if (obj.getServicePackage_Access() != null )
               setServicePackage_Access((String)Helper.copy(obj.getServicePackage_Access()));
           if (obj.getServiceType() != null )
               setServiceType((Integer)Helper.copy(obj.getServiceType()));
           if (obj.getSyncstatus() != null )
               setSyncstatus((String)Helper.copy(obj.getSyncstatus()));
           if (obj.getVlanID() != null )
               setVlanID((Integer)Helper.copy(obj.getVlanID()));
           if (obj.getid() != null )
               setid((com.calix.system.server.dbmodel.ICMSAid)Helper.copy(obj.getid()));
           if (obj.getIdentityValue() != null )
               setIdentityValue((com.calix.system.server.dbmodel.ICMSAid)Helper.copy(obj.getIdentityValue()));
        }
    } //-- void updateFields(CMSObject) 
//BEGIN CODE

    public void setBlackListRate(byte[] BLACKListRate)
    {
       if(BLACKListRate != null)
    	this.m_BLACKListRate = new String(BLACKListRate);
       else
    	   this.m_BLACKListRate = null;
    } 
    public byte[] getBlackListRate()
    {
    	if(this.m_BLACKListRate != null)
    		return this.m_BLACKListRate.getBytes();
    	else
    		return null;
    } 
    
    public void setInputPolicyUnicastRateLimit(Double Limit)
    {
    	if(Limit !=null)
    		this.m_INPUTPolicyUnicastRateLimit = String.valueOf(Limit);
    	else
    		this.m_INPUTPolicyUnicastRateLimit = null;
    } 
    public Double getInputPolicyUnicastRateLimit()
    {
    	if(this.m_INPUTPolicyUnicastRateLimit != null)
    		return Double.valueOf(m_INPUTPolicyUnicastRateLimit).doubleValue();
    	else
    		return null;
    } 
    
    public void setOutputPolicyUnicastRateLimit(Double Limit)
    {
       this.m_OUTPUTPolicyUnicastRateLimit = String.valueOf(Limit);
    } 
    public Double getOutputPolicyUnicastRateLimit()
    {
    	if(this.m_OUTPUTPolicyUnicastRateLimit != null)
    		return Double.valueOf(m_OUTPUTPolicyUnicastRateLimit).doubleValue();
    	else
    		return null;
    }  

	public void setconvertName(String convertName) {
		this.m_id = new EMSAid(convertName);
	} // -- void setconvertName(String)

	public String getconvertName() {
		return this.m_id.toString();
	}
	
    public CMSObject doLoad(DbTransaction tx) throws EMSException {
    	C7Database db =C7Database.getInstance(); 
    	CMSObject obj = null;
    	try{
    	db.beginTransaction();
    	Collection resultList = db.executeQuery(this.getClass(), "name = '"+this.getIdentityValue().toString()+"'", -1, -1);
    	if(resultList != null&&!resultList.isEmpty()){
    			Iterator itr = resultList.iterator();
    			obj = (CMSObject)itr.next();
    	}
		db.commitTransaction();
    	}catch(Exception e){
    		e.printStackTrace();
			db.rollbackTransaction();
    	}
    	finally{
    		db.close();
    	}
    	if(obj == null)
    		throw new EMSDatabaseException(EMSDatabaseException._loadNonExistentFail_, "Object does not exist");
    	else
    		return obj;
    }
    
	public ICMSQuery getDBQuery(String type, String filter) {
		if (filter == null || filter.equals(""))
			return new EMSGetAllQuery(type);
		else {
			Log.meta().error("BaseEMSObject: filterQuery is not supported");
			return null;
		}
	}
	
	public Collection doQuery(DbTransaction tx, String filter)throws EMSException {
			if (Log.db().isDebugEnabled())
				Log.db().debug("Inside doQuery");
				ICMSQuery query = getDBQuery(this.getTypeName(), null);
				Collection coll = query.exec((Object) tx.getDatabase(), (Object) tx);
			if (Log.db().isDebugEnabled())
				Log.db().debug("Out of doQuery");
				return coll;
		}
	
	public boolean isIdentityValuePrimaryKey() {
		return true;
	}
	
//END CODE
}